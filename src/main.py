from flask import Flask, json, jsonify, request, Response
from flask.helpers import make_response
from datetime import datetime
from os import getenv
import mysql.connector
import time

app = Flask(__name__)
app.config['JSON_SORT_KEYS'] = False

mydb = mysql.connector.connect(
host="mysqldb",
user=getenv('MYSQL_USER'),
password=getenv('MYSQL_PASSWORD'),
database=getenv('MYSQL_DATABASE')
)

def get_data(table : str):
    #compose query
	sql = "SELECT * FROM " + table
	mycursor = mydb.cursor()
	mycursor.execute(sql)
	return mycursor.fetchall()

@app.route("/api/countries", methods=["POST"])
def post_countries():
	#get request parameters
	params =  request.get_json(silent=True)
	#return bad request if request has not the correct format
	if not params:
		return Response(status=400)
	if params.get('nume') is None or not isinstance(params.get('nume'), str):
		return Response(status=400)
	if params.get('lon') is None:
		return Response(status=400)
	if params.get('lat') is None:
		return Response(status=400)

	#compose sql query
	sql = "INSERT INTO Countries (name, longitude, latitude) VALUES (%s, %s, %s)"
	val = (params['nume'], params['lon'], params['lat'])

	mycursor = mydb.cursor()
	try:
		mycursor.execute(sql, val)
		mydb.commit()
	except mysql.connector.Error as err:
		#conflict if country already exists
		return Response(status=409)

	#make sql query for country id (autogenerated by database)
	sql = "SELECT id FROM Countries WHERE name = %s"
	mycursor.execute(sql, (params['nume'],))
	myresult = mycursor.fetchone()
	return make_response(jsonify({'id': myresult[0]}), 201)

@app.route("/api/countries", methods=["GET"])
def get_countries():
	myresult = get_data("Countries")
	#make array with results
	countries = []
	for x in myresult:
			countries.append({'id' : x[0], 'nume' : x[1], 'lat' : x[2], 'lon' : x[3]})
	return jsonify(countries)

@app.route("/api/countries/<int:co>", methods=["PUT"])
def put_country(co):
	#get request parameters
	params = request.get_json(silent=True)
	#return bad request if it has not the correct format
	if not params:
		return Response(status=400)
	if params.get('id') is None:
		return Response(status=400)
	if params.get('id') != co:
		return Response(status=400)

	#compose sql query
	sql = "SELECT id FROM Countries WHERE id = %s"

	mycursor = mydb.cursor()
	mycursor.execute(sql, (co,))
	myresult = mycursor.fetchone()
	#the country does not exist
	if not myresult:
		return Response(status=404)
	else:
		#the country exists
		#compose sql query for update country
		sql = "UPDATE Countries SET "
		val = ()
		if params.get('nume'):
			if not isinstance(params.get('nume'), str):
				return Response(status=400)
			if len(val) != 0:
				sql = sql + ", "
			sql = sql + "name = %s"
			val = val + (params.get('nume'),)
		if params.get('lon'):
			if len(val) != 0:
				sql = sql + ", "
			sql = sql + "longitude = %s"
			val = val + (params.get('lon'),)
		if params.get('lat'):
			if len(val) != 0:
				sql = sql + ", "
			sql = sql + "latitude = %s"
			val = val + (params.get('lat'),)
				
		sql = sql + " WHERE id = %s"
		val = val + (str(co),)
		try:
			mycursor.execute(sql, val)
			mydb.commit()
		except mysql.connector.Error as err:
			#can't modify country because of uniqueness rule
			return Response(status=409)		
	return Response(status=200)

@app.route("/api/countries/<int:co>", methods=["DELETE"])
def delete_country(co):
	#id is not integer	
	if not isinstance(co, int):
		return Response(status=400)
	#compose sql query
	sql = "DELETE FROM Countries WHERE id = %s"
	mycursor = mydb.cursor()
	mycursor.execute(sql, (co,))
	mydb.commit()
	#country does not exist
	if mycursor.rowcount == 0:
		return Response(status=404)
	return Response(status=200)

@app.route("/api/cities", methods=["POST"])
def post_cities():
	#get request parameters
	params =  request.get_json(silent=True)
	#return bad request if request has not the correct format
	if not params:
		return Response(status=400)
	if params.get('idTara') is None or not isinstance(params.get('idTara'), int):
		return Response(status=400)
	if params.get('nume') is None or not isinstance(params.get('nume'), str):
		return Response(status=400)
	if params.get('lon') is None:
		return Response(status=400)
	if params.get('lat') is None:
		return Response(status=400)

	#compose sql query
	sql = "SELECT id FROM Countries WHERE id = %s"
	val = (params['idTara'],)
	mycursor = mydb.cursor()
	mycursor.execute(sql, val)
	myresult = mycursor.fetchone()
	if not myresult:
    	#country does not exist
		return Response(status=404)
	#compose sql query
	sql = "INSERT INTO Cities (country_id, name, longitude, latitude) VALUES (%s, %s, %s, %s)"
	val = (params['idTara'], params['nume'], params['lon'], params['lat'])
	
	try:
		mycursor.execute(sql, val)
		mydb.commit()
	except mysql.connector.Error as err:
		#conclict if city already exists
		return Response(status=409)

	#make sql query for city id (autogenerated by database)
	sql = "SELECT id FROM Cities WHERE name = %s"	
	mycursor.execute(sql, (params['nume'],))
	myresult = mycursor.fetchone()
	return make_response(jsonify({'id': myresult[0]}), 201)

@app.route("/api/cities", methods=["GET"])
def get_cities():
	myresult = get_data("Cities")
	countries = []
	#make array with results
	for x in myresult:
		countries.append({'id' : x[0], 'idTara':x[1],'nume' : x[2], 'lat' : x[3], 'lon' : x[4]})
	return jsonify(countries)

@app.route("/api/cities/country/<int:co>", methods=["GET"])
def get_country_cities(co):
	#id is not integer	
	if not isinstance(co, int):
		return Response(status=400)
	#compose query	
	sql = "SELECT * FROM Cities WHERE country_id = %s"
	mycursor = mydb.cursor()
	mycursor.execute(sql, (co,))
	myresult = mycursor.fetchall()
	#make array with results
	countries = []
	for x in myresult:
			countries.append({'id' : x[0], 'idTara':x[1],'nume' : x[2], 'lat' : x[3], 'lon' : x[4]})
	return jsonify(countries)
		
@app.route("/api/cities/<int:city>", methods=["PUT"])
def put_city(city):
	#id is not integer	
	if not isinstance(city, int):
		return Response(status=400)
	#get request parameters
	params = request.get_json(silent=True)
	#return bad request if request has not the correct format
	if not params:
		return Response(status=400)
	if params.get('id') is None:
		return Response(status=400)
	if params.get('id') != city:
		return Response(status=400)
	if params.get('idTara') is None or not isinstance(params.get('idTara'), int):
		return Response(status=400)

	#compose sql query
	sql = "SELECT id FROM Cities WHERE id = %s AND country_id = %s"
	mycursor = mydb.cursor()
	mycursor.execute(sql, (city, params.get('idTara')))
	myresult = mycursor.fetchone()
	#city does not exist
	if not myresult:
		return Response(status=404)
	else:
    	#city exists
		sql = "UPDATE Cities SET "
		val = ()
		if params.get('nume'):
			if not isinstance(params.get('nume'), str):
				return Response(status=400)
			if len(val) != 0:
				sql = sql + ", "
			sql = sql + "name = %s"
			val = val + (params.get('nume'),)
		if params.get('lon'):
			if len(val) != 0:
				sql = sql + ", "
			sql = sql + "longitude = %s"
			val = val + (params.get('lon'),)
		if params.get('lat'):
			if len(val) != 0:
				sql = sql + ", "
			sql = sql + "latitude = %s"
			val = val + (params.get('lat'),)
				
		sql = sql + " WHERE id = %s"
		val = val + (city,)
		try:
			mycursor.execute(sql, val)
			mydb.commit()
		except mysql.connector.Error as err:
			#can't modify city because of uniqueness rule
			return Response(status=409)	
	return Response(status=200)

@app.route("/api/cities/<int:city>", methods=["DELETE"])
def delete_city(city):
	#id is not integer	
	if not isinstance(city, int):
		return Response(status=400)

	#make sql query		
	sql = "DELETE FROM Cities WHERE id = %s"
	mycursor = mydb.cursor()
	mycursor.execute(sql, (city,))		
	mydb.commit()
	#city does not exist
	if mycursor.rowcount == 0:
		return Response(status=404)
	return Response(status=200)

@app.route("/api/temperatures", methods=["POST"])
def post_temperatures():
    #get request parameters
	params =  request.get_json(silent=True)
	#return bad request if request has not the correct format
	if not params:
		return Response(status=400)
	if params.get('idOras') is None or not isinstance(params.get('idOras'), int):
		return Response(status=400)
	if params.get('valoare') is None:
		return Response(status=400)

	#compose sql query
	sql = "SELECT id FROM Cities WHERE id = %s"
	val = (params['idOras'],)
	mycursor = mydb.cursor()
	mycursor.execute(sql, val)
	myresult = mycursor.fetchone()
	if not myresult:
    	#city does not exist
		return Response(status=404)
	#make sql query
	sql = "INSERT INTO Temperatures (city_id, value) VALUES (%s, %s)"
	val = (params['idOras'], params['valoare'])
	mycursor = mydb.cursor()
	try:
		time.sleep(1)
		mycursor.execute(sql, val)
		mydb.commit()
	except mysql.connector.Error as err:
		#temperatures already exists
		return Response(status=409)

	#make sql query for temperature id (autogenerated by database)
	sql = "SELECT id FROM Temperatures WHERE city_id = %s AND value = %s"	
	mycursor.execute(sql, val)
	myresult = mycursor.fetchone()
	return make_response(jsonify({'id': myresult[0]}), 201)

@app.route("/api/temperatures", methods=["GET"])
def get_temp1():
	#get request parameters
	params = request.args.to_dict()
	#make sql query
	key = "lat"
	sql = "SELECT * FROM Cities"
	val = ()
	#add latitude to query
	if key in params.keys():
		if len(val) != 0:
			sql = sql + " AND"	
		else:
			sql = sql + " WHERE"
		sql = sql + " latitude = %s"	
		val = val + (params[key],)
	#add longitude to query
	key = "lon" 
	if key in params.keys():
		if len(val) != 0:
			sql = sql + " AND"
		else :
				sql = sql + " WHERE"
		sql = sql + " longitude = %s"
		val = val + (params[key],)

	temp = "SELECT id, value, date(timestamp) FROM Temperatures WHERE city_id = %s"
	temps = []
	mycursor = mydb.cursor()
	mycursor.execute(sql, val)
	myresult = mycursor.fetchall()
	countries = []

	for x in myresult:
		#add city id to query
		cond = (x[0],)
		mycursor.execute(temp, cond)
		#extract all temperatures for city which respect longitude&latitude limits
		values = mycursor.fetchall()
		for y in values:
			#verify time limits and add temperatures in response
			date = y[2].strftime('%Y-%m-%d')
			key = "until" 
			if key in params.keys():
				dateUp = datetime.strptime(params['until'], '%Y-%m-%d')
				if dateUp and dateUp  < datetime.strptime(date, '%Y-%m-%d'):
						continue
			key = "from" 
			if key in params.keys():
				dateDown = datetime.strptime(params['from'], '%Y-%m-%d')
				if dateDown and dateDown > datetime.strptime(date, '%Y-%m-%d'):
						continue
			temps.append({'id' : y[0] , 'valoare' : y[1], 'timestamp': date})
	return jsonify(temps)

@app.route("/api/temperatures/cities/<int:city>", methods=["GET"])
def get_temp2(city):
	#id is not int
	if not isinstance(city, int):
		return Response(status=400)
	#get request parameters
	params = request.args.to_dict()

	#make sql query
	temp = "SELECT id, value, date(timestamp) FROM Temperatures WHERE city_id = %s"
	val = (city,)
	temps = []
	mycursor = mydb.cursor()
	mycursor.execute(temp, val)
	#extract all temperatures for the city
	values = mycursor.fetchall()
	for y in values:
    		#verify time limits
			date = y[2].strftime('%Y-%m-%d')
			key = "until" 
			if key in params.keys():
				dateUp = datetime.strptime(params['until'], '%Y-%m-%d')
				if dateUp and dateUp < datetime.strptime(date, '%Y-%m-%d'):
						continue
			key = "from" 
			if key in params.keys():
				dateDown = datetime.strptime(params['from'], '%Y-%m-%d')
				if dateDown and dateDown > datetime.strptime(date, '%Y-%m-%d'):
						continue
			temps.append({'id' : y[0] , 'valoare' : y[1], 'timestamp': date})		
	return jsonify(temps)
		
@app.route("/api/temperatures/countries/<int:country>", methods=["GET"])
def get_temp3(country):
	#id is not int
	if not isinstance(country, int):
		return Response(status=400)
	#get request parameter
	params = request.args.to_dict()
	mycursor = mydb.cursor()
	#make sql query
	sql = "SELECT * FROM Cities WHERE country_id = %s"
	val = (country, )
	temp = "SELECT id, value, date(timestamp) FROM Temperatures WHERE city_id = %s"
	temps = []
	mycursor.execute(sql, val)
	#extract all cities for the county
	myresult = mycursor.fetchall()
	countries = []

	for x in myresult:
		cond = (x[0],)
		mycursor.execute(temp, cond)
		#extract all temperatures for current city
		values = mycursor.fetchall()
		for y in values:
			#verify time limits
			date = y[2].strftime('%Y-%m-%d')
			key = "until" 
			if key in params.keys():
				dateUp = datetime.strptime(params['until'], '%Y-%m-%d')
				if dateUp and dateUp  < datetime.strptime(date, '%Y-%m-%d'):
						continue
			key = "from" 
			if key in params.keys():
				dateDown = datetime.strptime(params['from'], '%Y-%m-%d')
				if dateDown and dateDown > datetime.strptime(date, '%Y-%m-%d'):
						continue
			temps.append({'id' : y[0] , 'valoare' : y[1], 'timestamp': date})		
	return jsonify(temps)

@app.route("/api/temperatures/<int:temp>", methods=["PUT"])
def put_temp(temp):
	#id is not int
	if not isinstance(temp, int):
		return Response(status=400)
	#get request parameter
	params = request.get_json(silent=True)
	#return bad request if request has not the correct format
	if not params:
			return Response(status=400)
	if params.get('id') is None or not isinstance(params.get('id'), int):
			return Response(status=400)
	if params.get('id') != temp:
    			return Response(status=400)
	if params.get('idOras') is None or not isinstance(params.get('idOras'), int):
			return Response(status=400)
	if params.get('valoare') is None:
		return Response(status=400)	

	#make sql query
	sql = "SELECT id FROM Temperatures WHERE id = %s"
	mycursor = mydb.cursor() 	
	mycursor.execute(sql, (temp,))
	myresult = mycursor.fetchone()
	if not myresult:
		return Response(status=404)
	else:
		sql = "UPDATE Temperatures SET city_id = %s, value = %s WHERE id = %s"
		val = (params['idOras'], params['valoare'], str(temp))
		try:
			mycursor.execute(sql, val)
			mydb.commit()
		except mysql.connector.Error as err:
			#can't modify city because of uniqueness rule
			return Response(status=409)	
	return Response(status=200)

@app.route("/api/temperatures/<int:temp>", methods=["DELETE"])
def delete_temperature(temp):
	#id is not integer	
	if not isinstance(temp, int):
		return Response(status=400)

	#make sql query
	sql = "DELETE FROM Temperatures WHERE id = %s"
	mycursor = mydb.cursor()
	mycursor.execute(sql, (temp,))
	mydb.commit()
	if mycursor.rowcount == 0:
		return Response(status=404)
	return Response(status=200)

if __name__ == '__main__':
	app.run('0.0.0.0', debug=True)